name: deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      MONGODB: ${{secrets.MONGODB}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      HMS_APP_ACCESS_KEY: ${{secrets.HMS_APP_ACCESS_KEY}}
      HMS_APP_SECRET: ${{secrets.HMS_APP_SECRET}}
      NODE_ENV: ${{secrets.NODE_ENV}}
      HMS_DISCOURSE_TEMPLATE: ${{secrets.HMS_DISCOURSE_TEMPLATE}}
      HMS_URI: ${{secrets.HMS_URI}}
      ADMIN_SERVER_TOKEN: ${{secrets.ADMIN_SERVER_TOKEN}}
      LP_KEY: ${{secrets.LP_KEY}}
      LP_BASE_URL: ${{secrets.LP_BASE_URL}}
      HMS_BEAM_URL: ${{secrets.HMS_BEAM_URL}}
      HMS_DOMAIN: ${{secrets.HMS_DOMAIN}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.27.0' # default is latest stable
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          
      - name: Fetch GitHub Secrets
        run: |
          echo "apiVersion: v1" > secrets.yaml
          echo "kind: Secret" >> secrets.yaml
          echo "metadata:" >> secrets.yaml
          echo "  name: my-secrets" >> secrets.yaml
          echo "type: Opaque" >> secrets.yaml
          echo "data:" >> secrets.yaml
          echo "  MONGODB: \$(echo -n \${{secrets.MONGODB}} | base64)" >> secrets.yaml
          echo "  SECRET_KEY: \$(echo -n \${{secrets.SECRET_KEY}} | base64)" >> secrets.yaml
          echo "  HMS_APP_ACCESS_KEY: \$(echo -n \${{secrets.HMS_APP_ACCESS_KEY}} | base64)" >> secrets.yaml
          echo "  HMS_APP_SECRET: \$(echo -n \${{secrets.HMS_APP_SECRET}} | base64)" >> secrets.yaml
          echo "  NODE_ENV: \$(echo -n \${{secrets.NODE_ENV}} | base64)" >> secrets.yaml
          echo "  HMS_DISCOURSE_TEMPLATE: \$(echo -n \${{secrets.HMS_DISCOURSE_TEMPLATE}} | base64)" >> secrets.yaml
          echo "  HMS_URI: \$(echo -n \${{secrets.HMS_URI}} | base64)" >> secrets.yaml
          echo "  ADMIN_SERVER_TOKEN: \$(echo -n \${{secrets.ADMIN_SERVER_TOKEN}} | base64)" >> secrets.yaml
          echo "  LP_KEY: \$(echo -n \${{secrets.LP_KEY}} | base64)" >> secrets.yaml
          echo "  LP_BASE_URL: \$(echo -n \${{secrets.LP_BASE_URL}} | base64)" >> secrets.yaml
          echo "  HMS_BEAM_URL: \$(echo -n \${{secrets.HMS_BEAM_URL}} | base64)" >> secrets.yaml
          echo "  HMS_DOMAIN: \$(echo -n \${{secrets.HMS_DOMAIN}} | base64)" >> secrets.yaml
        shell: bash

      - name: Apply Kubernetes Secret
        run: kubectl apply -f secrets.yaml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: agora-dev
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          
      - name: Update kube config
        run: aws eks update-kubeconfig --name agora-dev-cluster 
          
      - name: Uninstall existing Helm release (if it exists)
        run: |
          helm uninstall agora-server-chart || true

      - name: Deploy nodejs Helm chart to EKS
        run: |
          helm install agora-server-chart ./agora-server-chart 

